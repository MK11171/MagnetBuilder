/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void shapeList_click1(GDropList source, GEvent event) { //_CODE_:shapes:521101:
  println("shapes - GDropList >> GEvent." + event + " @ " + millis());
} //_CODE_:shapes:521101:

public void colour_click1(GDropList source, GEvent event) { //_CODE_:colour:539994:
  println("colour - GDropList >> GEvent." + event + " @ " + millis());
} //_CODE_:colour:539994:

public void rotation_turn1(GKnob source, GEvent event) { //_CODE_:rotation:587457:
  println("rotation - GKnob >> GEvent." + event + " @ " + millis());
} //_CODE_:rotation:587457:

public void magnetSize_change1(GCustomSlider source, GEvent event) { //_CODE_:magnetSize:946948:
  println("magnetSize - GCustomSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:magnetSize:946948:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  shapes = new GDropList(this, 223, 191, 90, 100, 4, 10);
  shapes.setItems(loadStrings("list_521101"), 0);
  shapes.addEventHandler(this, "shapeList_click1");
  colour = new GDropList(this, 326, 192, 90, 160, 7, 10);
  colour.setItems(loadStrings("list_539994"), 0);
  colour.addEventHandler(this, "colour_click1");
  rotation = new GKnob(this, 441, 177, 60, 60, 0.8);
  rotation.setTurnRange(270, 270);
  rotation.setTurnMode(GKnob.CTRL_ANGULAR);
  rotation.setShowArcOnly(false);
  rotation.setOverArcOnly(true);
  rotation.setIncludeOverBezel(false);
  rotation.setShowTrack(true);
  rotation.setLimits(270.0, 0.0, 360.0);
  rotation.setNbrTicks(36);
  rotation.setStickToTicks(true);
  rotation.setShowTicks(true);
  rotation.setOpaque(false);
  rotation.addEventHandler(this, "rotation_turn1");
  magnetSize = new GCustomSlider(this, 106, 184, 100, 40, "grey_blue");
  magnetSize.setShowValue(true);
  magnetSize.setShowLimits(true);
  magnetSize.setLimits(3.0, 1.0, 5.0);
  magnetSize.setNbrTicks(5);
  magnetSize.setStickToTicks(true);
  magnetSize.setShowTicks(true);
  magnetSize.setNumberFormat(G4P.DECIMAL, 2);
  magnetSize.setOpaque(false);
  magnetSize.addEventHandler(this, "magnetSize_change1");
  sizeLabel = new GLabel(this, 119, 153, 80, 20);
  sizeLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  sizeLabel.setText("Size");
  sizeLabel.setOpaque(false);
  shapeLable = new GLabel(this, 228, 147, 80, 20);
  shapeLable.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  shapeLable.setText("Shape");
  shapeLable.setOpaque(false);
  colourLabel = new GLabel(this, 330, 148, 80, 20);
  colourLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  colourLabel.setText("Colour");
  colourLabel.setOpaque(false);
  rotationLabel = new GLabel(this, 429, 148, 80, 20);
  rotationLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  rotationLabel.setText("Rotation");
  rotationLabel.setOpaque(false);
}

// Variable declarations 
// autogenerated do not edit
GDropList shapes; 
GDropList colour; 
GKnob rotation; 
GCustomSlider magnetSize; 
GLabel sizeLabel; 
GLabel shapeLable; 
GLabel colourLabel; 
GLabel rotationLabel; 
